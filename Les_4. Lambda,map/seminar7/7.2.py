# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. 
# Напишите функцию
# find_farthest_orbit(list_of_orbits),
# которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Мой вариант
# import math
# def find_farthest_orbit(list):
#     max = 0
#     planet_ind = 0
#     for i in list:
#         if math.pi * i[0] * i[1] > max and i[0] != i[1]:
#             max = math.pi * i[0] * i[1]
#             planet_ind = i
#     return planet_ind

# Вариант преопдавателя 
def find_farthest_orbit(num_list):
    return max([(i[0]*i[1], i) for i in num_list if i[0] != i[1]]) [1]

# перебирая каждый элемент списка (в данном случае каждый элемент - кортеж),
# при выполнении условия неравенства элементов внутри кортежа,
# выводим список новых кортежей, где первый элемент - перемноженные 
# элементы исходного кортежа, а второй элемент - сам исходный кортеж.
# функцией max выводим максимальный элемент (будет (25, (2.5, 10)) )
# а из него выбираем и выводим элемент с индексом 1 [1]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

# print)
# print(list(map(lambda x: math.pi*x[0]*x[1], filter(lambda x: x[0] != x[1], orbits))))

